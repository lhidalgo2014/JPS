[{"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\index.js":"1","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\reportWebVitals.js":"2","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\App.js":"3","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\database.js":"4","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\firebase.js":"5","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\search\\Search.jsx":"6","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\createSorteo\\CreateSorteo.jsx":"7","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\accountMoney\\AccountMoney.jsx":"8","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\registerSorteo\\RegisterSorteo.jsx":"9","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\queryPrize\\QueryPrize.jsx":"10","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\Pay.jsx":"11"},{"size":517,"mtime":1610821536645,"results":"12","hashOfConfig":"13"},{"size":375,"mtime":1609198047970,"results":"14","hashOfConfig":"13"},{"size":6087,"mtime":1611989785058,"results":"15","hashOfConfig":"13"},{"size":1594,"mtime":1611457102070,"results":"16","hashOfConfig":"13"},{"size":542,"mtime":1610211557143,"results":"17","hashOfConfig":"13"},{"size":5957,"mtime":1611457102064,"results":"18","hashOfConfig":"13"},{"size":6607,"mtime":1611988070559,"results":"19","hashOfConfig":"13"},{"size":5083,"mtime":1611457102039,"results":"20","hashOfConfig":"13"},{"size":6399,"mtime":1611457102062,"results":"21","hashOfConfig":"13"},{"size":12405,"mtime":1611988526847,"results":"22","hashOfConfig":"13"},{"size":3104,"mtime":1611989800720,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"15ms1l7",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\index.js",[],["48","49"],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\reportWebVitals.js",[],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\App.js",["50","51","52","53","54","55","56","57","58"],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\database.js",[],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\firebase.js",[],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\search\\Search.jsx",[],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\createSorteo\\CreateSorteo.jsx",[],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\accountMoney\\AccountMoney.jsx",[],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\registerSorteo\\RegisterSorteo.jsx",[],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\queryPrize\\QueryPrize.jsx",["59","60","61"],"import './QueryPrize.css'\r\nimport React, { useState } from 'react';\r\nimport { db } from '../../firebase'\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Box from '@material-ui/core/Box';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`simple-tabpanel-${index}`}\r\n        aria-labelledby={`simple-tab-${index}`}\r\n        {...other}\r\n        >\r\n        {value === index && (\r\n            <Box p={3}>\r\n                <Typography>{children}</Typography>\r\n            </Box>\r\n        )}\r\n        </div>\r\n    );\r\n}\r\n  \r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    }\r\n}));\r\n\r\n\r\nconst LotChanComponent = (props) => {\r\n    const classes = useStyles();\r\n    const [message, setMessage] = useState('Consultando...');\r\n    const [prize, setPrize] = useState(0);\r\n    const [showResult, setResult] = useState(false)\r\n    const [sorteoNumber, setSorteoNumber] = useState();\r\n    const [sorteoSerie, setSorteoSerie] = useState();\r\n    const [winnerNumber, setWinnerNumber] = useState();\r\n    const [billsNumber, setBillsNumber] = useState();\r\n\r\n    // 2CllYdh393AKsi3D50Yx\r\n    const query = () => {\r\n        console.log(\"SEARCHING\")\r\n        db.collection(\"sorteo\").doc(sorteoNumber)\r\n            .onSnapshot(querySnapshot => {\r\n                const data = querySnapshot.data()\r\n                if(data !== 'undefined') {\r\n                    hasWon(data)\r\n                } else setResult(false)\r\n            })\r\n    }\r\n\r\n    const hasWon = (data) => {\r\n        data.winnerNumber.every((prize, index) => {\r\n            if(prize.number === Number(winnerNumber) && prize.serie === Number(sorteoSerie)) {\r\n                setMessage('Felicidades')\r\n                setPrize(data.prizeList[index] * billsNumber)\r\n                setResult(true)\r\n                return false\r\n            }\r\n            return true\r\n        })\r\n    }\r\n\r\n    const updateSorteoNumber = (event) => {\r\n        setSorteoNumber(event.target.value)\r\n    }\r\n\r\n    const updateSorteoSerie = (event) => {\r\n        setSorteoSerie(event.target.value)\r\n    }\r\n\r\n    const updateWinnerNumber = (event) => {\r\n        setWinnerNumber(event.target.value)\r\n    }\r\n\r\n    const updateBillsNumber = (event) => {\r\n        setBillsNumber(event.target.value)\r\n    }\r\n\r\n    const close = (event) => {\r\n        props.parentCallback(event, sorteoNumber);\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3}>\r\n                <Grid container direction=\"row\" justify=\"flex-start\" item xs={12}>\r\n                    <Button onClick={query} startIcon={<SearchIcon />} size=\"medium\" color=\"primary\" className={classes.margin}>\r\n                        Buscar\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TextField value={sorteoNumber} onChange={updateSorteoNumber} id=\"filled-basic\" label=\"Número de sorteo\" variant=\"filled\" />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TextField value={sorteoSerie} onChange={updateSorteoSerie} id=\"filled-basic\" label=\"Número de serie\" variant=\"filled\" />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TextField value={winnerNumber} onChange={updateWinnerNumber} id=\"filled-basic\" label=\"Número ganador\" variant=\"filled\" />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TextField value={billsNumber} onChange={updateBillsNumber} id=\"filled-basic\" label=\"Número de billetes\" variant=\"filled\" />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <p className=\"Text-content\">{message} </p>\r\n                </Grid>\r\n\r\n                <Grid item xs={4}>\r\n                    <IconButton size=\"medium\">\r\n                        <AttachMoneyIcon style={{ color: '#323232', fontSize: 120 }} />\r\n                    </IconButton>\r\n                </Grid>\r\n\r\n                <Grid item xs={6}>\r\n                    {showResult ? <p className=\"Text-end-content\">{prize}</p> : null}\r\n                </Grid>\r\n\r\n                <Grid container direction=\"row\" justify=\"flex-end\" item xs={12}>\r\n                    {showResult ? \r\n                        <Button onClick={close} variant=\"contained\" size=\"medium\" color=\"primary\" className={classes.margin}>\r\n                            Pagar\r\n                        </Button> :\r\n                        null\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst LottoComponent = (props) => {\r\n    const classes = useStyles();\r\n    const [message, setMessage] = useState('Consultando...');\r\n    const [prize, setPrize] = useState(0);\r\n    const [showResult, setResult] = useState(false)\r\n    const [sorteoNumber, setSorteoNumber] = useState();\r\n    const [numberList, setNumberList] = useState([]);\r\n\r\n    const query = () => {\r\n        console.log(\"SEARCHING\")\r\n        db.collection(\"sorteo\").doc(sorteoNumber)\r\n            .onSnapshot(querySnapshot => {\r\n                const data = querySnapshot.data(0, 0, 0, 0, 0)\r\n                if(data !== 'undefined') {\r\n                    hasWon(data)\r\n                } else setResult(false)\r\n            })\r\n    }\r\n\r\n    const hasWon = (data) => {\r\n        // data.winnerNumber.every((prize, index) => {\r\n        //     if(prize.number === Number(winnerNumber) && prize.serie === Number(sorteoSerie)) {\r\n        //         setMessage('Felicidades')\r\n        //         setPrize(data.prizeList[index] * billsNumber)\r\n        //         setResult(true)\r\n        //         return false\r\n        //     }\r\n        //     return true\r\n        // })\r\n    }\r\n\r\n    const updateSorteoNumber = (event) => {\r\n        setSorteoNumber(event.target.value)\r\n    }\r\n\r\n    const updateNumberList = (event, index) => {\r\n        var tempList = numberList\r\n        tempList[index] = event.target.value\r\n        setNumberList(tempList)\r\n    }\r\n\r\n    const close = (event) => {\r\n        props.parentCallback(event, sorteoNumber);\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3} container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\r\n                <Grid container direction=\"row\" justify=\"flex-start\" item xs={12}>\r\n                    <Button onClick={query} startIcon={<SearchIcon />} size=\"medium\" color=\"primary\" className={classes.margin}>\r\n                        Buscar\r\n                    </Button>\r\n                </Grid>\r\n                <Grid container direction=\"row\" justify=\"flex-start\" item xs={12}>\r\n                    <TextField value={sorteoNumber} onChange={updateSorteoNumber} id=\"filled-basic\" label=\"Número de sorteo\" variant=\"filled\" />\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <TextField value={numberList[0]} onChange={(event) => updateNumberList(event, 0)} id=\"filled-basic\" label=\"Número 1\" variant=\"filled\" />\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <TextField value={numberList[1]} onChange={(event) => updateNumberList(event, 1)} id=\"filled-basic\" label=\"Número 2\" variant=\"filled\" />\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <TextField value={numberList[2]} onChange={(event) => updateNumberList(event, 2)} id=\"filled-basic\" label=\"Número 3\" variant=\"filled\" />\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <TextField value={numberList[3]} onChange={(event) => updateNumberList(event, 3)} id=\"filled-basic\" label=\"Número 4\" variant=\"filled\" />\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <TextField value={numberList[4]} onChange={(event) => updateNumberList(event, 4)} id=\"filled-basic\" label=\"Número 5\" variant=\"filled\" />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <p className=\"Text-content\">{message} </p>\r\n                </Grid>\r\n\r\n                <Grid item xs={4}>\r\n                    <IconButton size=\"medium\">\r\n                        <AttachMoneyIcon style={{ color: '#323232', fontSize: 120 }} />\r\n                    </IconButton>\r\n                </Grid>\r\n\r\n                <Grid item xs={6}>\r\n                    {showResult ? <p className=\"Text-end-content\">{prize}</p> : null}\r\n                </Grid>\r\n\r\n                <Grid container direction=\"row\" justify=\"flex-end\" item xs={12}>\r\n                    <Button onClick={close} variant=\"contained\" size=\"medium\" color=\"primary\" className={classes.margin}>\r\n                        Pagar\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass QueryPrize extends React.Component {\r\n    state = {\r\n        tabValue: 0,\r\n        sorteoType: 'LoteriaChances'\r\n    }\r\n\r\n    handleTabChange = (event, newValue) => {\r\n        console.log(\"Index: \" + newValue);\r\n        if(newValue === 0) this.setState({sorteoType: 'LoteriaChances'})\r\n        else this.setState({sorteoType: 'Lotto'})\r\n        this.setState({tabValue: newValue})\r\n    }\r\n\r\n    payLotCha = (event, data) => {\r\n        this.props.parentCallback(event, data);\r\n        event.preventDefault();\r\n    }\r\n\r\n    payLotto = (event, data) => {\r\n        this.props.parentCallback(event, data);\r\n        event.preventDefault();\r\n    }\r\n\r\n    close = (event, data) => {\r\n        this.props.closeComponent(event, data);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Query-prize\">\r\n                <div className=\"Top-bar\">\r\n                    <Grid className=\"Top-bar\" container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\r\n                        <Grid style={{textAlign:\"center\"}} className=\"Center\" item xs={3}>\r\n                            <Typography className=\"Text-tittle\" noWrap variant=\"body2\" gutterBottom>\r\n                                Consulta de premios\r\n                            </Typography>\r\n                        </Grid>\r\n\r\n\r\n                        <Grid style={{textAlign:\"center\"}} className=\"Center\" item xs={6}>\r\n                            <Tabs indicatorColor=\"primary\" textColor=\"primary\" centered value={this.state.tabValue} onChange={this.handleTabChange} aria-label=\"simple tabs example\">\r\n                                <Tab label=\"Lotería | Chances\"/>\r\n                                <Tab label=\"Lotto\"/>\r\n                            </Tabs>\r\n                        </Grid>\r\n\r\n                        <Grid style={{textAlign:\"center\"}} item xs={3}>\r\n                            <IconButton onClick={this.close} aria-label=\"delete\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <TabPanel value={this.state.tabValue} index={0}>\r\n                        <LotChanComponent parentCallback={this.payLotCha} sorteoType={this.state.sorteoType}/>\r\n                    </TabPanel>\r\n                    <TabPanel value={this.state.tabValue} index={1}>\r\n                        <LottoComponent parentCallback={this.payLotto} sorteoType={this.state.sorteoType}/>\r\n                    </TabPanel>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QueryPrize;","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\Pay.jsx",["62","63"],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":3,"column":10,"nodeType":"70","messageId":"71","endLine":3,"endColumn":30},{"ruleId":"68","severity":1,"message":"72","line":3,"column":32,"nodeType":"70","messageId":"71","endLine":3,"endColumn":46},{"ruleId":"68","severity":1,"message":"73","line":3,"column":48,"nodeType":"70","messageId":"71","endLine":3,"endColumn":58},{"ruleId":"68","severity":1,"message":"74","line":3,"column":60,"nodeType":"70","messageId":"71","endLine":3,"endColumn":72},{"ruleId":"68","severity":1,"message":"75","line":19,"column":8,"nodeType":"70","messageId":"71","endLine":19,"endColumn":21},{"ruleId":"68","severity":1,"message":"76","line":20,"column":8,"nodeType":"70","messageId":"71","endLine":20,"endColumn":21},{"ruleId":"68","severity":1,"message":"77","line":21,"column":8,"nodeType":"70","messageId":"71","endLine":21,"endColumn":25},{"ruleId":"68","severity":1,"message":"78","line":22,"column":8,"nodeType":"70","messageId":"71","endLine":22,"endColumn":19},{"ruleId":"79","severity":1,"message":"80","line":96,"column":13,"nodeType":"81","endLine":96,"endColumn":145},{"ruleId":"68","severity":1,"message":"82","line":162,"column":21,"nodeType":"70","messageId":"71","endLine":162,"endColumn":31},{"ruleId":"68","severity":1,"message":"83","line":163,"column":19,"nodeType":"70","messageId":"71","endLine":163,"endColumn":27},{"ruleId":"84","severity":1,"message":"85","line":208,"column":41,"nodeType":"86","endLine":208,"endColumn":50},{"ruleId":"68","severity":1,"message":"87","line":1,"column":17,"nodeType":"70","messageId":"71","endLine":1,"endColumn":26},{"ruleId":"68","severity":1,"message":"88","line":1,"column":28,"nodeType":"70","messageId":"71","endLine":1,"endColumn":36},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'transactAccountMoney' is defined but never used.","Identifier","unusedVar","'registerSorteo' is defined but never used.","'getSorteos' is defined but never used.","'createSorteo' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setMessage' is assigned a value but never used.","'setPrize' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]