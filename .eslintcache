[{"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\index.js":"1","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\reportWebVitals.js":"2","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\App.js":"3","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\database.js":"4","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\firebase.js":"5","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\search\\Search.jsx":"6","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\createSorteo\\CreateSorteo.jsx":"7","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\accountMoney\\AccountMoney.jsx":"8","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\registerSorteo\\RegisterSorteo.jsx":"9","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\queryPrize\\QueryPrize.jsx":"10","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\Pay.jsx":"11","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\RewardPlan.jsx":"12","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\RewardPlanDetail.jsx":"13","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\QueryPaymentHistory.jsx":"14","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\MostPayNumber.jsx":"15"},{"size":517,"mtime":1610821536645,"results":"16","hashOfConfig":"17"},{"size":375,"mtime":1609198047970,"results":"18","hashOfConfig":"17"},{"size":6633,"mtime":1612230002914,"results":"19","hashOfConfig":"17"},{"size":1594,"mtime":1612134484155,"results":"20","hashOfConfig":"17"},{"size":542,"mtime":1610211557143,"results":"21","hashOfConfig":"17"},{"size":5964,"mtime":1611995945359,"results":"22","hashOfConfig":"17"},{"size":6607,"mtime":1611988070559,"results":"23","hashOfConfig":"17"},{"size":5083,"mtime":1611457102039,"results":"24","hashOfConfig":"17"},{"size":6399,"mtime":1611457102062,"results":"25","hashOfConfig":"17"},{"size":12781,"mtime":1612130312133,"results":"26","hashOfConfig":"17"},{"size":3574,"mtime":1612129986504,"results":"27","hashOfConfig":"17"},{"size":4133,"mtime":1612129893371,"results":"28","hashOfConfig":"17"},{"size":4288,"mtime":1611996992530,"results":"29","hashOfConfig":"17"},{"size":10006,"mtime":1612136960878,"results":"30","hashOfConfig":"17"},{"size":7225,"mtime":1612231198379,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"15ms1l7",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\index.js",[],["67","68"],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\reportWebVitals.js",[],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\App.js",["69","70","71","72","73","74","75","76","77","78","79","80"],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\database.js",[],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\firebase.js",[],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\search\\Search.jsx",[],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\createSorteo\\CreateSorteo.jsx",[],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\accountMoney\\AccountMoney.jsx",[],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\registerSorteo\\RegisterSorteo.jsx",[],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\queryPrize\\QueryPrize.jsx",["81","82","83"],"import './QueryPrize.css'\r\nimport React, { useState } from 'react';\r\nimport { db } from '../../firebase'\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Box from '@material-ui/core/Box';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`simple-tabpanel-${index}`}\r\n        aria-labelledby={`simple-tab-${index}`}\r\n        {...other}\r\n        >\r\n        {value === index && (\r\n            <Box p={3}>\r\n                <Typography>{children}</Typography>\r\n            </Box>\r\n        )}\r\n        </div>\r\n    );\r\n}\r\n  \r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    }\r\n}));\r\n\r\n\r\nconst LotChanComponent = (props) => {\r\n    const classes = useStyles();\r\n    const [message, setMessage] = useState('Consultando...');\r\n    const [prize, setPrize] = useState(0);\r\n    const [showResult, setResult] = useState(false)\r\n    const [sorteoNumber, setSorteoNumber] = useState();\r\n    const [sorteoSerie, setSorteoSerie] = useState();\r\n    const [winnerNumber, setWinnerNumber] = useState();\r\n    const [billsNumber, setBillsNumber] = useState();\r\n\r\n    // 2CllYdh393AKsi3D50Yx\r\n    const query = () => {\r\n        console.log(\"SEARCHING\")\r\n        db.collection(\"sorteo\").doc(sorteoNumber)\r\n            .onSnapshot(querySnapshot => {\r\n                const data = querySnapshot.data()\r\n                if(typeof data !== 'undefined') {\r\n                    console.log(data)\r\n                    hasWon(data)\r\n                } else setResult(false)\r\n            })\r\n    }\r\n\r\n    const hasWon = (data) => {\r\n        data.winnerNumber.every((prize, index) => {\r\n            if(prize.number === Number(winnerNumber) && prize.serie === Number(sorteoSerie)) {\r\n                setMessage('Felicidades')\r\n                setPrize(data.prizeList[index] * billsNumber)\r\n                setResult(true)\r\n                return false\r\n            }\r\n            return true\r\n        })\r\n    }\r\n\r\n    const updateSorteoNumber = (event) => {\r\n        setSorteoNumber(event.target.value)\r\n    }\r\n\r\n    const updateSorteoSerie = (event) => {\r\n        setSorteoSerie(event.target.value)\r\n    }\r\n\r\n    const updateWinnerNumber = (event) => {\r\n        setWinnerNumber(event.target.value)\r\n    }\r\n\r\n    const updateBillsNumber = (event) => {\r\n        setBillsNumber(event.target.value)\r\n    }\r\n\r\n    const close = (event) => {\r\n        const data = {\r\n            sorteoNumber: sorteoNumber,\r\n            sorteoType: props.sorteoType,\r\n            total: prize,\r\n            detail: {\r\n                winnerNumber: Number(winnerNumber),\r\n                sorteoSerie: Number(sorteoSerie),\r\n                billsNumber: Number(billsNumber)\r\n            }\r\n        }\r\n        props.parentCallback(event, data);\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3}>\r\n                <Grid container direction=\"row\" justify=\"flex-start\" item xs={12}>\r\n                    <Button onClick={query} startIcon={<SearchIcon />} size=\"medium\" color=\"primary\" className={classes.margin}>\r\n                        Buscar\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TextField value={sorteoNumber} onChange={updateSorteoNumber} id=\"filled-basic\" label=\"NÃºmero de sorteo\" variant=\"filled\" />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TextField value={sorteoSerie} onChange={updateSorteoSerie} id=\"filled-basic\" label=\"NÃºmero de serie\" variant=\"filled\" />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TextField value={winnerNumber} onChange={updateWinnerNumber} id=\"filled-basic\" label=\"NÃºmero ganador\" variant=\"filled\" />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TextField value={billsNumber} onChange={updateBillsNumber} id=\"filled-basic\" label=\"NÃºmero de billetes\" variant=\"filled\" />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <p className=\"Text-content\">{message} </p>\r\n                </Grid>\r\n\r\n                <Grid item xs={4}>\r\n                    <IconButton size=\"medium\">\r\n                        <AttachMoneyIcon style={{ color: '#323232', fontSize: 120 }} />\r\n                    </IconButton>\r\n                </Grid>\r\n\r\n                <Grid item xs={6}>\r\n                    {showResult ? <p className=\"Text-end-content\">{prize}</p> : null}\r\n                </Grid>\r\n\r\n                <Grid container direction=\"row\" justify=\"flex-end\" item xs={12}>\r\n                    {showResult ? \r\n                        <Button onClick={close} variant=\"contained\" size=\"medium\" color=\"primary\" className={classes.margin}>\r\n                            Pagar\r\n                        </Button> :\r\n                        null\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst LottoComponent = (props) => {\r\n    const classes = useStyles();\r\n    const [message, setMessage] = useState('Consultando...');\r\n    const [prize, setPrize] = useState(0);\r\n    const [showResult, setResult] = useState(false)\r\n    const [sorteoNumber, setSorteoNumber] = useState();\r\n    const [numberList, setNumberList] = useState([]);\r\n\r\n    const query = () => {\r\n        console.log(\"SEARCHING\")\r\n        db.collection(\"sorteo\").doc(sorteoNumber)\r\n            .onSnapshot(querySnapshot => {\r\n                const data = querySnapshot.data(0, 0, 0, 0, 0)\r\n                if(data !== 'undefined') {\r\n                    hasWon(data)\r\n                } else setResult(false)\r\n            })\r\n    }\r\n\r\n    const hasWon = (data) => {\r\n        // data.winnerNumber.every((prize, index) => {\r\n        //     if(prize.number === Number(winnerNumber) && prize.serie === Number(sorteoSerie)) {\r\n        //         setMessage('Felicidades')\r\n        //         setPrize(data.prizeList[index] * billsNumber)\r\n        //         setResult(true)\r\n        //         return false\r\n        //     }\r\n        //     return true\r\n        // })\r\n    }\r\n\r\n    const updateSorteoNumber = (event) => {\r\n        setSorteoNumber(event.target.value)\r\n    }\r\n\r\n    const updateNumberList = (event, index) => {\r\n        var tempList = numberList\r\n        tempList[index] = event.target.value\r\n        setNumberList(tempList)\r\n    }\r\n\r\n    const close = (event) => {\r\n        props.parentCallback(event, sorteoNumber);\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3} container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\r\n                <Grid container direction=\"row\" justify=\"flex-start\" item xs={12}>\r\n                    <Button onClick={query} startIcon={<SearchIcon />} size=\"medium\" color=\"primary\" className={classes.margin}>\r\n                        Buscar\r\n                    </Button>\r\n                </Grid>\r\n                <Grid container direction=\"row\" justify=\"flex-start\" item xs={12}>\r\n                    <TextField value={sorteoNumber} onChange={updateSorteoNumber} id=\"filled-basic\" label=\"NÃºmero de sorteo\" variant=\"filled\" />\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <TextField value={numberList[0]} onChange={(event) => updateNumberList(event, 0)} id=\"filled-basic\" label=\"NÃºmero 1\" variant=\"filled\" />\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <TextField value={numberList[1]} onChange={(event) => updateNumberList(event, 1)} id=\"filled-basic\" label=\"NÃºmero 2\" variant=\"filled\" />\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <TextField value={numberList[2]} onChange={(event) => updateNumberList(event, 2)} id=\"filled-basic\" label=\"NÃºmero 3\" variant=\"filled\" />\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <TextField value={numberList[3]} onChange={(event) => updateNumberList(event, 3)} id=\"filled-basic\" label=\"NÃºmero 4\" variant=\"filled\" />\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <TextField value={numberList[4]} onChange={(event) => updateNumberList(event, 4)} id=\"filled-basic\" label=\"NÃºmero 5\" variant=\"filled\" />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <p className=\"Text-content\">{message} </p>\r\n                </Grid>\r\n\r\n                <Grid item xs={4}>\r\n                    <IconButton size=\"medium\">\r\n                        <AttachMoneyIcon style={{ color: '#323232', fontSize: 120 }} />\r\n                    </IconButton>\r\n                </Grid>\r\n\r\n                <Grid item xs={6}>\r\n                    {showResult ? <p className=\"Text-end-content\">{prize}</p> : null}\r\n                </Grid>\r\n\r\n                <Grid container direction=\"row\" justify=\"flex-end\" item xs={12}>\r\n                    <Button onClick={close} variant=\"contained\" size=\"medium\" color=\"primary\" className={classes.margin}>\r\n                        Pagar\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass QueryPrize extends React.Component {\r\n    state = {\r\n        tabValue: 0,\r\n        sorteoType: 'LoteriaChances'\r\n    }\r\n\r\n    handleTabChange = (event, newValue) => {\r\n        console.log(\"Index: \" + newValue);\r\n        if(newValue === 0) this.setState({sorteoType: 'LoteriaChances'})\r\n        else this.setState({sorteoType: 'Lotto'})\r\n        this.setState({tabValue: newValue})\r\n    }\r\n\r\n    payLotCha = (event, data) => {\r\n        this.props.parentCallback(event, data);\r\n        event.preventDefault();\r\n    }\r\n\r\n    payLotto = (event, data) => {\r\n        this.props.parentCallback(event, data);\r\n        event.preventDefault();\r\n    }\r\n\r\n    close = (event, data) => {\r\n        this.props.closeComponent(event, data);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Query-prize\">\r\n                <div className=\"Top-bar\">\r\n                    <Grid className=\"Top-bar\" container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\r\n                        <Grid style={{textAlign:\"center\"}} className=\"Center\" item xs={3}>\r\n                            <Typography className=\"Text-tittle\" noWrap variant=\"body2\" gutterBottom>\r\n                                Consulta de premios\r\n                            </Typography>\r\n                        </Grid>\r\n\r\n\r\n                        <Grid style={{textAlign:\"center\"}} className=\"Center\" item xs={6}>\r\n                            <Tabs indicatorColor=\"primary\" textColor=\"primary\" centered value={this.state.tabValue} onChange={this.handleTabChange} aria-label=\"simple tabs example\">\r\n                                <Tab label=\"LoterÃ­a | Chances\"/>\r\n                                <Tab label=\"Lotto\"/>\r\n                            </Tabs>\r\n                        </Grid>\r\n\r\n                        <Grid style={{textAlign:\"center\"}} item xs={3}>\r\n                            <IconButton onClick={this.close} aria-label=\"delete\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <TabPanel value={this.state.tabValue} index={0}>\r\n                        <LotChanComponent parentCallback={this.payLotCha} sorteoType={this.state.sorteoType}/>\r\n                    </TabPanel>\r\n                    <TabPanel value={this.state.tabValue} index={1}>\r\n                        <LottoComponent parentCallback={this.payLotto} sorteoType={this.state.sorteoType}/>\r\n                    </TabPanel>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QueryPrize;","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\Pay.jsx",[],"C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\RewardPlan.jsx",["84"],"import { db } from '../firebase'\r\nimport React, {useState, useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nconst columns = [\r\n    { id: '#', label: '#', minWidth: 170 },\r\n    { id: 'tipo', label: 'Tipo', minWidth: 100 },\r\n    { id: 'fecha', label: 'Fecha', minWidth: 100 }\r\n  ];\r\n  \r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    \r\n    container: {\r\n        maxHeight: 440,\r\n    },\r\n});\r\n\r\nconst RewardPlan = (props) => {\r\n    const classes = useStyles();\r\n    const [rows, setRows] = useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    const createData = (sorteo) => {\r\n        return { '#': sorteo.id, tipo: sorteo.type, fecha: new Date(sorteo.date.seconds * 1000).toDateString() };\r\n    }\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    \r\n    const loadData = () => {\r\n        db.collection(\"sorteo\").where(\"state\", \"==\", \"sorteado\")\r\n            .onSnapshot(querySnapshot => {\r\n                const data = querySnapshot.docs.map(doc => {\r\n                    const tempData = doc.data()\r\n                    tempData.id = doc.id\r\n\r\n                    return createData(tempData)\r\n                });\r\n                setRows(data)\r\n                console.log(data);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                    {columns.map((column) => (\r\n                        <TableCell\r\n                            key={column.id}\r\n                            align={column.align}\r\n                            style={{ minWidth: column.minWidth }}\r\n                        >\r\n                            {column.label}\r\n                        </TableCell>\r\n                    ))}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                        return (\r\n                            <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                {columns.map((column) => {\r\n                                    console.log('id: ' + column.id)\r\n                                    const value = row[column.id];\r\n                                    return (\r\n                                        <TableCell key={column.id} align={column.align}>\r\n                                            {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                        </TableCell>\r\n                                    );\r\n                                })}\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[10, 25, 100]}\r\n                component=\"div\"\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default RewardPlan;","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\RewardPlanDetail.jsx",["85"],"import { db } from '../firebase'\r\nimport React, {useState, useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nconst columns = [\r\n    { id: '#', label: '#', minWidth: 170 },\r\n    { id: 'tipo', label: 'Tipo', minWidth: 100 },\r\n    { id: 'premios', label: 'Cantidad de premios', minWidth: 100 },\r\n    { id: 'total', label: 'Total', minWidth: 100 }\r\n  ];\r\n  \r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    \r\n    container: {\r\n        maxHeight: 440,\r\n    },\r\n});\r\n\r\nconst RewardPlan = (props) => {\r\n    const classes = useStyles();\r\n    const [rows, setRows] = useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    const createData = (sorteo) => {\r\n        return { '#': sorteo.id, tipo: sorteo.type, premios: sorteo.prizeList.length, total: sorteo.prizeList.reduce((a, b) => Number(a) + Number(b), 0) };\r\n    }\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    \r\n    const loadData = () => {\r\n        db.collection(\"sorteo\").where(\"state\", \"==\", \"sorteado\")\r\n            .onSnapshot(querySnapshot => {\r\n                const data = querySnapshot.docs.map(doc => {\r\n                    const tempData = doc.data()\r\n                    tempData.id = doc.id\r\n                    console.log(tempData);\r\n\r\n                    return createData(tempData)\r\n                });\r\n                setRows(data)\r\n                console.log(data);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                    {columns.map((column) => (\r\n                        <TableCell\r\n                            key={column.id}\r\n                            align={column.align}\r\n                            style={{ minWidth: column.minWidth }}\r\n                        >\r\n                            {column.label}\r\n                        </TableCell>\r\n                    ))}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                        return (\r\n                            <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                {columns.map((column) => {\r\n                                    console.log('id: ' + column.id)\r\n                                    const value = row[column.id];\r\n                                    return (\r\n                                        <TableCell key={column.id} align={column.align}>\r\n                                            {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                        </TableCell>\r\n                                    );\r\n                                })}\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[10, 25, 100]}\r\n                component=\"div\"\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default RewardPlan;","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\QueryPaymentHistory.jsx",["86","87"],"import { db } from '../firebase'\r\nimport React, {useState, useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\n\r\nconst columns = [\r\n    { id: '#', label: '#', minWidth: 170 },\r\n    { id: 'sorteoType', label: 'Sorteo', minWidth: 100 },\r\n    { id: 'idPlayer', label: 'Jugador', minWidth: 100 },\r\n    { id: 'serie', label: 'Serie', minWidth: 100 },\r\n    { id: 'number', label: 'NÃºmero', minWidth: 100 },\r\n    { id: 'fecha', label: 'Fecha', minWidth: 100 }\r\n  ];\r\n  \r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    \r\n    container: {\r\n        maxHeight: 440,\r\n    },\r\n});\r\n\r\nconst sorteoTypes = [\r\n    {\r\n    value: 'No',\r\n    label: 'No',\r\n    },\r\n    {\r\n      value: 'Chances',\r\n      label: 'Chances',\r\n    },\r\n    {\r\n      value: 'LoterÃ­a',\r\n      label: 'LoterÃ­a',\r\n    },\r\n    {\r\n      value: 'Lotto',\r\n      label: 'Lotto',\r\n    }\r\n  ];\r\n\r\nconst QueryPaymentHistory = (props) => {\r\n    const classes = useStyles();\r\n    const [data, setData] = useState([]);\r\n    const [rows, setRows] = useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n    const [sorteoType, setSorteoType] = React.useState('No');\r\n    const [startDate, setStartDate] = React.useState(null);\r\n    const [endDate, setEndDate] = React.useState(null);\r\n    const [playerID, setPlayerID] = React.useState(null);\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    const createData = (payment) => {\r\n        return { \r\n            '#': payment.id,\r\n            sorteoType: payment.sorteoType,\r\n            idPlayer: payment.detail.idPlayer,\r\n            serie: payment.detail.sorteoSerie,\r\n            number: payment.detail.winnerNumber,\r\n            fecha: new Date(payment.date.seconds * 1000).toDateString()\r\n        };\r\n    }\r\n\r\n    const handleSorteoTypeChange = (event) => {\r\n        setSorteoType(event.target.value);\r\n    };\r\n\r\n    const handleStartDateChange = (date) => {\r\n        setStartDate(date);\r\n    };\r\n\r\n    const handleEndDateChange = (date) => {\r\n        setEndDate(date);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangePlayerID = (event) => {\r\n        setPlayerID(event.target.value);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const resetFilters = () => {\r\n        setSorteoType('No');\r\n        setStartDate(null);\r\n        setEndDate(null);\r\n        setPlayerID(null);\r\n    }\r\n\r\n    // gameType, date, player id, number, serie\r\n    const loadData = () => {\r\n        db.collection(\"payment\")\r\n            .onSnapshot(querySnapshot => {\r\n                const data = querySnapshot.docs.map(doc => {\r\n                    const tempData = doc.data()\r\n                    tempData.id = doc.id\r\n\r\n                    return createData(tempData)\r\n                });\r\n                setData(data)\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateRowsData()\r\n    }, [data]); // Only re-subscribe if props.friend.id changes\r\n\r\n    const updateRowsData = () => {\r\n        var newRows = []\r\n        data.forEach((row) => {\r\n            var add = true\r\n            if(playerID) {\r\n                if(row.idPlayer !== playerID) add = false\r\n            }\r\n\r\n            if(startDate && endDate) {\r\n                const date = new Date(row.fecha);\r\n                const tempStartDate = new Date(startDate)\r\n                const tempEndDate = new Date(endDate)\r\n                if(!(tempStartDate <= date && date <= tempEndDate)) add = false\r\n            }\r\n\r\n            if(sorteoType !== 'No') {\r\n                if(row.sorteoType !== sorteoType)  add = false\r\n            }\r\n\r\n            if(add) newRows.push(row)\r\n        })\r\n        setRows(newRows)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\">\r\n                <Grid item xs={2}>\r\n                    <TextField\r\n                        id=\"filled-select-currency\"\r\n                        select\r\n                        label=\"Tipo\"\r\n                        value={sorteoType}\r\n                        onChange={handleSorteoTypeChange}\r\n                        variant=\"filled\"\r\n                        >\r\n                        {sorteoTypes.map((option) => (\r\n                            <MenuItem key={option.value} value={option.value}>\r\n                                {option.label}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </TextField>\r\n                </Grid>\r\n\r\n                <Grid item xs={2}>\r\n                    <TextField value={playerID} label='Ced. Jugador' onChange={handleChangePlayerID} variant=\"filled\" />\r\n                </Grid>\r\n\r\n                <Grid item xs={3}>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                        <KeyboardDatePicker\r\n                            disableToolbar\r\n                            variant=\"inline\"\r\n                            format=\"MM/dd/yyyy\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Fecha inicio\"\r\n                            value={startDate}\r\n                            onChange={handleStartDateChange}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                            }}\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                </Grid>\r\n\r\n                <Grid item xs={3}>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                        <KeyboardDatePicker\r\n                            disableToolbar\r\n                            variant=\"inline\"\r\n                            format=\"MM/dd/yyyy\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Fecha fin\"\r\n                            value={endDate}\r\n                            onChange={handleEndDateChange}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                            }}\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}>\r\n                    <IconButton onClick={resetFilters}>\r\n                        <ReplayIcon />\r\n                    </IconButton>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}>\r\n                    <Button onClick={updateRowsData} variant=\"contained\" color=\"primary\">\r\n                        Filtrar\r\n                    </Button>\r\n                </Grid>\r\n                \r\n            </Grid>\r\n            <Paper className={classes.root}>\r\n                <TableContainer className={classes.container}>\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                        {columns.map((column) => (\r\n                            <TableCell\r\n                                key={column.id}\r\n                                align={column.align}\r\n                                style={{ minWidth: column.minWidth }}\r\n                            >\r\n                                {column.label}\r\n                            </TableCell>\r\n                        ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                            return (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                    {columns.map((column) => {\r\n                                        const value = row[column.id];\r\n                                        return (\r\n                                            <TableCell key={column.id} align={column.align}>\r\n                                                {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                            </TableCell>\r\n                                        );\r\n                                    })}\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[10, 25, 100]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QueryPaymentHistory;","C:\\Users\\leist\\Documents\\Github\\JPS\\src\\components\\MostPayNumber.jsx",["88","89","90","91","92"],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":3,"column":10,"nodeType":"99","messageId":"100","endLine":3,"endColumn":30},{"ruleId":"97","severity":1,"message":"101","line":3,"column":32,"nodeType":"99","messageId":"100","endLine":3,"endColumn":46},{"ruleId":"97","severity":1,"message":"102","line":3,"column":48,"nodeType":"99","messageId":"100","endLine":3,"endColumn":58},{"ruleId":"97","severity":1,"message":"103","line":3,"column":60,"nodeType":"99","messageId":"100","endLine":3,"endColumn":72},{"ruleId":"97","severity":1,"message":"104","line":9,"column":8,"nodeType":"99","messageId":"100","endLine":9,"endColumn":18},{"ruleId":"97","severity":1,"message":"105","line":10,"column":8,"nodeType":"99","messageId":"100","endLine":10,"endColumn":24},{"ruleId":"97","severity":1,"message":"106","line":11,"column":8,"nodeType":"99","messageId":"100","endLine":11,"endColumn":27},{"ruleId":"97","severity":1,"message":"107","line":23,"column":8,"nodeType":"99","messageId":"100","endLine":23,"endColumn":21},{"ruleId":"97","severity":1,"message":"108","line":24,"column":8,"nodeType":"99","messageId":"100","endLine":24,"endColumn":21},{"ruleId":"97","severity":1,"message":"109","line":25,"column":8,"nodeType":"99","messageId":"100","endLine":25,"endColumn":25},{"ruleId":"97","severity":1,"message":"110","line":26,"column":8,"nodeType":"99","messageId":"100","endLine":26,"endColumn":19},{"ruleId":"111","severity":1,"message":"112","line":102,"column":13,"nodeType":"113","endLine":102,"endColumn":145},{"ruleId":"97","severity":1,"message":"114","line":173,"column":21,"nodeType":"99","messageId":"100","endLine":173,"endColumn":31},{"ruleId":"97","severity":1,"message":"115","line":174,"column":19,"nodeType":"99","messageId":"100","endLine":174,"endColumn":27},{"ruleId":"116","severity":1,"message":"117","line":219,"column":41,"nodeType":"118","endLine":219,"endColumn":50},{"ruleId":"119","severity":1,"message":"120","line":37,"column":8,"nodeType":"121","endLine":37,"endColumn":10,"suggestions":"122"},{"ruleId":"119","severity":1,"message":"120","line":38,"column":8,"nodeType":"121","endLine":38,"endColumn":10,"suggestions":"123"},{"ruleId":"119","severity":1,"message":"120","line":72,"column":8,"nodeType":"121","endLine":72,"endColumn":10,"suggestions":"124"},{"ruleId":"119","severity":1,"message":"125","line":133,"column":8,"nodeType":"121","endLine":133,"endColumn":14,"suggestions":"126"},{"ruleId":"97","severity":1,"message":"127","line":16,"column":8,"nodeType":"99","messageId":"100","endLine":16,"endColumn":20},{"ruleId":"97","severity":1,"message":"128","line":17,"column":10,"nodeType":"99","messageId":"100","endLine":17,"endColumn":33},{"ruleId":"97","severity":1,"message":"129","line":17,"column":35,"nodeType":"99","messageId":"100","endLine":17,"endColumn":53},{"ruleId":"119","severity":1,"message":"120","line":66,"column":8,"nodeType":"121","endLine":66,"endColumn":10,"suggestions":"130"},{"ruleId":"119","severity":1,"message":"125","line":108,"column":8,"nodeType":"121","endLine":108,"endColumn":14,"suggestions":"131"},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"no-unused-vars","'transactAccountMoney' is defined but never used.","Identifier","unusedVar","'registerSorteo' is defined but never used.","'getSorteos' is defined but never used.","'createSorteo' is defined but never used.","'RewardPlan' is defined but never used.","'RewardPlanDetail' is defined but never used.","'QueryPaymentHistory' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setMessage' is assigned a value but never used.","'setPrize' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","ArrayExpression",["134"],["135"],["136"],"React Hook useEffect has a missing dependency: 'updateRowsData'. Either include it or remove the dependency array.",["137"],"'DateFnsUtils' is defined but never used.","'MuiPickersUtilsProvider' is defined but never used.","'KeyboardDatePicker' is defined but never used.",["138"],["139"],"no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},{"desc":"140","fix":"142"},{"desc":"140","fix":"143"},{"desc":"144","fix":"145"},{"desc":"140","fix":"146"},{"desc":"144","fix":"147"},"Update the dependencies array to be: [loadData]",{"range":"148","text":"149"},{"range":"150","text":"149"},{"range":"151","text":"149"},"Update the dependencies array to be: [data, updateRowsData]",{"range":"152","text":"153"},{"range":"154","text":"149"},{"range":"155","text":"153"},[1171,1173],"[loadData]",[1240,1242],[2348,2350],[3966,3972],"[data, updateRowsData]",[2014,2016],[3081,3087]]